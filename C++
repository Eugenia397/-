СОРТИРОВКА ВЫБОРОМ
#include <iostream>
using namespace std;

// Функция для печати содержимого массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i)
        cout << arr[i] << " ";
    cout << endl;
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    // Проходим по массиву от начала до предпоследнего элемента
    for (int i = 0; i < n - 1; ++i) {   // Внешний цикл проходит по каждому элементу массива

        // Предполагаем, что первый несортированный элемент является минимальным
        int minIndex = i;               // Индекс текущего минимума

        // Внутренний цикл ищет минимальный элемент среди оставшихся элементов
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;           // Обновляем индекс минимального элемента
            }
        }
        
        // Если найден новый минимум, меняем местами элементы
        if (minIndex != i) {
            swap(arr[i], arr[minIndex]);// Меняем местами текущий элемент и найденный минимум
        }
    }
}

int main() {
    int arr[] = {64, 25, 12, 22, 11};  // Исходный массив
    int n = sizeof(arr)/sizeof(arr[0]);
    
    cout << "Исходный массив: ";
    printArray(arr, n);

    selectionSort(arr, n);              // Сортируем массив методом выборки

    cout << "Отсортированный массив: ";
    printArray(arr, n);

    return 0;
}



СОРТИРОВКА СЛИЯНИЕМ
#include <iostream>
using namespace std;

// Вспомогательная функция для объединения двух отсортированных массивов
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;       // Размер левой части
    int n2 = right - mid;          // Размер правой части
    
    // Создаем временные массивы для хранения обеих частей
    int L[n1], R[n2];
    
    // Копируем данные в временные массивы
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];       // Левая часть
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];   // Правая часть
    
    // Инициализируем индексы временных массивов и итогового массива
    int i = 0, j = 0, k = left;
    
    // Объединение обоих временных массивов в исходный массив
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }
    
    // Осталось добавить оставшиеся элементы из левого массива
    while (i < n1) {
        arr[k++] = L[i++];
    }
    
    // Осталось добавить оставшиеся элементы из правого массива
    while (j < n2) {
        arr[k++] = R[j++];
    }
}

// Рекурсивная функция сортировки слиянием
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Определяем середину массива
        int mid = left + (right - left) / 2;
        
        // РЕКУРСИВНЫЙ ВЫЗОВ ДЛЯ ОБЕИХ ПОДЧАСТЕЙ
        mergeSort(arr, left, mid);      // Сортировка левой половины
        mergeSort(arr, mid + 1, right); // Сортировка правой половины
        
        // СОЕДИНЕНИЕ ОТСОРТИРОВАННЫХ ПОДМАССИВОВ
        merge(arr, left, mid, right);   // Соединение результатов
    }
}

// Тестирование сортировки
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    cout << "Исходный массив:\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
    
    // Выполняем сортировку
    mergeSort(arr, 0, n - 1);
    
    cout << "Отсортированный массив:\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
    
    return 0;
}



БЫСТРАЯ СОРТИРОВКА
#include <iostream>
using namespace std;

// Вспомогательная функция для обмена двух элементов массива
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Выбор последнего элемента в качестве опорного (pivot),
// и размещение элементов меньше pivot слева, а больше или равных — справа
int partition(int arr[], int low, int high) {
    int pivot = arr[high];    // Последний элемент выбран в качестве опорного
    int i = low - 1;          // Индекс для меньших элементов
    
    // Перебор элементов массива от начала до конца
    for (int j = low; j <= high - 1; j++) {
        // Если текущий элемент меньше или равен pivot, перемещаем его влево
        if (arr[j] <= pivot) {
            i++;              // Увеличение индекса меньших элементов
            swap(arr[i], arr[j]); // Меняем местами элементы
        }
    }
    
    // Ставим pivot на своё место
    swap(arr[i + 1], arr[high]);
    return (i + 1);           // Возврат индекса места опорного элемента
}

// Основная рекурсивная функция быстрой сортировки
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Получаем индекс после разделения массива
        int pi = partition(arr, low, high);
        
        // Рекурсивно сортируем элементы до и после опорного элемента
        quickSort(arr, low, pi - 1);   // До опорного элемента
        quickSort(arr, pi + 1, high);  // После опорного элемента
    }
}

// Функция для вывода массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Пример использования
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    cout << "Исходный массив: ";
    printArray(arr, n);
    
    quickSort(arr, 0, n - 1);
    
    cout << "Отсортированный массив: ";
    printArray(arr, n);
    
    return 0;
}



ПИРАМИДАЛЬНАЯ СОРТИРОВКА
#include <iostream>
using namespace std;

// Корректирует кучу, делая поддерево с корнем в pos вершиной
void heapify(int arr[], int n, int pos) {
    int largest = pos;       // Изначально считаем текущий элемент наибольшим
    int left = 2 * pos + 1; // Левый ребенок
    int right = 2 * pos + 2;// Правый ребенок

    // Если левый ребенок существует и больше родителя
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // Если правый ребенок существует и больше родителя
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // Если наибольшее значение изменилось, обновляем вершину
    if (largest != pos) {
        swap(arr[pos], arr[largest]); // Меняем местами вершины
        heapify(arr, n, largest);     // Рекурсивно восстанавливаем кучу снизу вверх
    }
}

// Основное тело сортировки
void heapSort(int arr[], int n) {
    // Строим max-кучу из массива
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);           // Восстанавливаем кучу сверху вниз

    // Извлекаем элементы из кучи по одному
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);         // Максимальный элемент (корень) отправляется в конец
        heapify(arr, i, 0);           // Восстанавливаем кучу после удаления корня
    }
}

// Вывод массива
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Тестирование сортировки
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Исходный массив: ";
    printArray(arr, n);

    heapSort(arr, n);                // Применение пирамидальной сортировки

    cout << "Отсортированный массив: ";
    printArray(arr, n);

    return 0;
}



ИНТЕРПОЛИРУЮЩИЙ ПОИСК
#include <iostream>
using namespace std;

// Функция интерполирующего поиска
int interpolationSearch(int arr[], int size, int x) {
    int low = 0;               // Начальная нижняя граница поиска
    int high = size - 1;       // Верхняя граница поиска (размер массива минус единица)

    // Цикл выполняется, пока не будут найдены нужные условия для выхода
    while ((low <= high) && (x >= arr[low]) && (x <= arr[high])) {
        // Проверяем, не произошло ли совпадение первого и последнего элемента
        if (arr[low] == arr[high])
            break;

        // Интерполяционная формула расчета позиции следующего возможного кандидата
        int pos = low + (((double)(high - low) / (arr[high] - arr[low])) * (x - arr[low]));

        // Если нашли нужное значение, возвращаем позицию
        if (arr[pos] == x)
            return pos;

        // Если элемент меньше искомого, перемещаемся вправо
        if (arr[pos] < x)
            low = pos + 1;
        // Если элемент больше искомого, перемещаемся влево
        else
            high = pos - 1;
    }

    // Если ничего не найдено, возвращаем -1
    return -1;
}

// Главная функция программы
int main() {
    int arr[] = {10, 12, 13, 16, 18, 19, 20, 21}; // Отсортированный массив
    int size = sizeof(arr)/sizeof(arr[0]);         // Размер массива
    int x = 18;                                    // Искомое значение

    // Выполняем поиск
    int index = interpolationSearch(arr, size, x);

    // Вывод результата
    if(index != -1){
        cout << "Индекс искомого элемента: " << index << endl;
    } else{
        cout << "Элемент не найден." << endl;
    }

    return 0;
}



ФИБОННАЧИ ПОИСК
def fibonacci_search(arr, x):
    def fib_gen(max_val):  # Генерация чисел Фибоначчи
        a, b = 0, 1
        while True:
            yield a
            a, b = b, a+b
            if a > max_val:
                break

    # Получаем список чисел Фибоначчи вплоть до длины массива
    fib_numbers = list(fib_gen(len(arr)))

    offset = -1  # Текущая смещение относительно начала массива
    k = len(fib_numbers) - 1  # Индекс наибольшего числа Фибоначчи меньшего длины массива

    while k > 0 and fib_numbers[k] > 0:
        i = min(offset + fib_numbers[k], len(arr) - 1)  # Рассчитываем возможную позицию

        if arr[i] < x:  # Если текущий элемент меньше искомого, сдвигаемся дальше
            offset = i
            k -= 1
        elif arr[i] > x:  # Если текущий элемент больше искомого, идём назад
            k -= 2
        else:  # Нашли элемент
            return i

    return -1  # Элемента нет в массиве


# Тестирование функции
arr = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]
x = 85
index = fibonacci_search(arr, x)
print("Индекс:", index)
