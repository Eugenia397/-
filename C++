СОРТИРОВКА ВЫБОРОМ
#include <iostream>
using namespace std;

// Функция для печати содержимого массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i)
        cout << arr[i] << " ";
    cout << endl;
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    // Проходим по массиву от начала до предпоследнего элемента
    for (int i = 0; i < n - 1; ++i) {   // Внешний цикл проходит по каждому элементу массива

        // Предполагаем, что первый несортированный элемент является минимальным
        int minIndex = i;               // Индекс текущего минимума

        // Внутренний цикл ищет минимальный элемент среди оставшихся элементов
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;           // Обновляем индекс минимального элемента
            }
        }
        
        // Если найден новый минимум, меняем местами элементы
        if (minIndex != i) {
            swap(arr[i], arr[minIndex]);// Меняем местами текущий элемент и найденный минимум
        }
    }
}

int main() {
    int arr[] = {64, 25, 12, 22, 11};  // Исходный массив
    int n = sizeof(arr)/sizeof(arr[0]);
    
    cout << "Исходный массив: ";
    printArray(arr, n);

    selectionSort(arr, n);              // Сортируем массив методом выборки

    cout << "Отсортированный массив: ";
    printArray(arr, n);

    return 0;
}



СОРТИРОВКА СЛИЯНИЕМ
#include <iostream>
using namespace std;

// Вспомогательная функция для объединения двух отсортированных массивов
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;       // Размер левой части
    int n2 = right - mid;          // Размер правой части
    
    // Создаем временные массивы для хранения обеих частей
    int L[n1], R[n2];
    
    // Копируем данные в временные массивы
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];       // Левая часть
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];   // Правая часть
    
    // Инициализируем индексы временных массивов и итогового массива
    int i = 0, j = 0, k = left;
    
    // Объединение обоих временных массивов в исходный массив
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }
    
    // Осталось добавить оставшиеся элементы из левого массива
    while (i < n1) {
        arr[k++] = L[i++];
    }
    
    // Осталось добавить оставшиеся элементы из правого массива
    while (j < n2) {
        arr[k++] = R[j++];
    }
}

// Рекурсивная функция сортировки слиянием
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Определяем середину массива
        int mid = left + (right - left) / 2;
        
        // РЕКУРСИВНЫЙ ВЫЗОВ ДЛЯ ОБЕИХ ПОДЧАСТЕЙ
        mergeSort(arr, left, mid);      // Сортировка левой половины
        mergeSort(arr, mid + 1, right); // Сортировка правой половины
        
        // СОЕДИНЕНИЕ ОТСОРТИРОВАННЫХ ПОДМАССИВОВ
        merge(arr, left, mid, right);   // Соединение результатов
    }
}

// Тестирование сортировки
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    cout << "Исходный массив:\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
    
    // Выполняем сортировку
    mergeSort(arr, 0, n - 1);
    
    cout << "Отсортированный массив:\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
    
    return 0;
}


