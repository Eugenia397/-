СОРТИРОВКА ОБМЕНОМ (ПУЗЫРЁК)
def bubble_sort(arr):
    """
    Реализация пузырьковой сортировки.
    :param arr: Входной список чисел
    """
    n = len(arr)                      # Определяем длину списка
    for i in range(n):                # Первый уровень итераций
        swapped = False               # Флаг, показывающий, была ли произведена замена на данном этапе
        for j in range(0, n-i-1):     # Второй уровень итераций, проходим по неподсортированным элементам
            if arr[j] > arr[j+1]:     # Проверяем соседние элементы
                arr[j], arr[j+1] = arr[j+1], arr[j]  # Меняем элементы местами
                swapped = True        # Установили флаг замены
        if not swapped:               # Если ни одной замены не произошло, значит массив уже отсортирован
            break                     # Завершаем работу раньше времени

# Пример использования
if __name__ == "__main__":
    array = [64, 34, 25, 12, 22, 11]
    print("Исходный массив:", array)
    bubble_sort(array)
    print("Отсортированный массив:", array)


СОРТИРОВКА ВСТАВКАМИ
def insertion_sort(arr):
    """Реализует алгоритм сортировки вставками."""
    # Проходим по всему массиву, начиная со второго элемента (i=1)
    for i in range(1, len(arr)):
        key = arr[i]                  # Берём очередной элемент
        j = i - 1                     # Индексация предыдущих элементов
        
        # Передвигаемся назад по уже отсортированной части массива,
        # пока не найдём правильную позицию для вставки нашего ключа
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]      # Перемещаем больший элемент вперёд
            j -= 1                    # Уменьшаем индекс для проверки следующего элемента
            
        # Вставляем ключ в нужную позицию
        arr[j + 1] = key
    return arr


# Пример использования
if __name__ == "__main__":
    array = [64, 34, 25, 12, 22, 11]
    print("Исходный массив:", array)
    sorted_array = insertion_sort(array)
    print("Отсортированный массив:", sorted_array)



СОРТИРОВКА ШЕЛЛА
def shell_sort(arr):
    """
    Реализует алгоритм сортировки Шелла.
    :param arr: Список для сортировки
    """
    gap = len(arr) // 2  # Начальный промежуток (интервал) равен половине длины массива
    
    # Продолжаем уменьшение промежутка, пока он не станет нулевым
    while gap > 0:
        # Производим частичную сортировку вставками с данным промежутком
        for i in range(gap, len(arr)):  # Начинаем обработку с элемента, расположенного на расстоянии 'gap' от начала
            temp = arr[i]                 # Сохраняем текущий элемент
            j = i                         # Начало внутренней сортировки вставками
            
            # Сравниваем элементы, расположенные на расстоянии 'gap', и смещаем их при необходимости
            while j >= gap and arr[j-gap] > temp:
                arr[j] = arr[j-gap]      # Смещение элемента
                j -= gap                  # Переносимся на предыдущую позицию
                
            # Устанавливаем сохранённый элемент на своё место
            arr[j] = temp
        
        # Уменьшаем величину промежутка
        gap //= 2
    
    return arr

# Пример использования
if __name__ == "__main__":
    array = [64, 34, 25, 12, 22, 11]
    print("Исходный массив:", array)
    sorted_array = shell_sort(array)
    print("Отсортированный массив:", sorted_array)
