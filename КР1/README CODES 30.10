БЛОЧНАЯ (КОРЗИННАЯ) СОРТИРОВКА
1) Определение:
Блочная (корзинная) сортировка, также известная как Bucket Sort, представляет собой алгоритм сортировки, который распределяет элементы массива по различным контейнерам («бочкам») или корзинам, каждая из которых затем сортируется отдельно.
Этот метод особенно эффективен, когда исходные элементы равномерно распределены в диапазоне значений.

2) Кратко о работе алгоритма:
1. Определяется количество корзин.
num_buckets = len(arr)
2. Каждый элемент помещается в корзину согласно функции распределения.
index_b = int((j / max_value) * (num_buckets - 1))
        buckets_list[index_b].append(j)
3. Содержимое каждой корзины сортируется индивидуально.
for i in range(len(buckets_list)):
        buckets_list[i].sort()
4. Объединяем отсортированные бакеты в итоговый отсортированный массив.
final_output = []
    for x in buckets_list:
        final_output.extend(x)

3) Описание временной сложности:
BIG-O обозначает верхнюю границу производительности алгоритма. Среднее время исполнения алгоритма равно O(n+k), где n — длина входящего массива, а k — количество бакетов. Это хорошее среднее время, если распределение элементов равномерное.
Однако, если данные сильно сгруппированы в небольшом количестве бакетов, эффективность падает до уровня обычной быстрой сортировки (O(n ^2) в худшем случае).

4) Краткое объяснение оценки временной сложности алгоритма:
Алгоритм разделяет элементы массива на разные группы ("бактики") на основании значений, потом сортирует каждую группу отдельно и объединяет отсортированные группы обратно в единое целое.





БЛИННАЯ СОРТИРОВКА
1) Определение:
Блинная сортировка — это интересный алгоритм сортировки, который основан на аналогии с переворачиванием блинов в стопке.
Основная идея заключается в следующем: представьте себе стопку блинов разного размера, которую нужно отсортировать таким образом, чтобы самый большой блин оказался внизу, второй по размеру сверху него и так далее, пока самый маленький блин не окажется вверху.
Единственное действие, которое разрешено в этом процессе — перевернуть верхний слой блинов любым способом.

2) Кратко о работе алгоритма:
1. Меняем местами первый и последний элементы текущего сегмента:
arr[start], arr[end] = arr[end], arr[start]
2. Максимальный элемент поднимается наверх массива с помощью переворота:
flip(arr, mi)
3. Опускаем максимальный элемент вниз, сделав ещё один переворот:
flip(arr, current_size - 1)
4. Повторяем шаги 1–3 для оставшихся элементов массива, уменьшаясь на единицу на каждом шаге:
while remaining_length > 1:
    ...
    remaining_length -= 1

3) Описание временной сложности:
Лучшая сложность: O(n) (если массив изначально отсортирован).
Средняя и худшая сложность: O(N^2), так как на каждом шаге мы производим два переворота (линейные операции) и итерации продолжаются до полного завершения процесса.

4) Краткое объяснение оценки временной сложности алгоритма:
Каждый проход цикла ищет максимум и дважды переворачивает массив, оба действия имеют линейную сложность O(n).
Поскольку таких циклов должно произойти N раз, общая временная сложность составляет O(N^2).





СОРТИРОВКА БУСИНАМИ(ГРАВИТАЦИОННАЯ)
1) Определение:
Сортировка бусинами (также известна как гравитационная сортировка) — это нестандартный визуализированный алгоритм сортировки целых чисел, основанный на модели физических процессов. Представьте столбцы одинаковых вертикальных нитей, каждая нить покрыта бусынами (шарами), высота которой соответствует числу в массиве.
Затем воображаемые нити позволяют бусинам падать вертикально вниз, формируя устойчивые структуры, после чего считывается новый упорядоченный массив.

2) Кратко о работе алгоритма:
1. Строительство матрицы:
beads_matrix = [[False]*len(arr) for _ in range(max_height)]
2. Свободное падение бусинок вниз:
for row in range(max_height):
        count_true = sum(beads_matrix[row])
        beads_matrix[row][:count_true] = [True]*count_true
        beads_matrix[row][count_true:] = [False]*(len(arr)-count_true)
3. Подсчитываем количество бусин:
height = sum(row[col] for row in beads_matrix)
        result.append(height)

3) Описание временной сложности:
Теоретически и практически временные характеристики зависят от реализаций:
Средняя и худшая временная сложность: O(W∗N), где W — максимальная цифра в массиве, а N — количество элементов в массиве.
Пространственная сложность: O(W∗N), так как необходима дополнительная память для представления матриц "столбцов".
Это связано с тем, что на каждое число тратится время пропорциональное его величине (W), и всего таких чисел N. Соответственно, общее время увеличивается с ростом обоих факторов.

4) Краткое объяснение оценки временной сложности алгоритма:
Основной фактор замедления алгоритма — необходимость прохождения по двум измерениям (строкам и столбцам) матрицы. 
Размер матрицы пропорционален произведению двух величин: длине массива (N) и самой большой цифре (W). 
Из-за этого средняя и худшая временная сложность составляет O(W∗N).







ПОИСК СКАЧКАМИ
1) Определение:
Поиск скачками (Jump Search) — это гибридный алгоритм поиска, который сочетает в себе идеи линейного и бинарного поисков.
Его основная цель — уменьшить количество сравнений, необходимых для нахождения элемента в отсортированном массиве.

2) Кратко о работе алгоритма:
1. Определяется размер скачков (step):
step = int(math.sqrt(length))  
2. Совершается серия скачков по массиву:
prev = 0
    next_jump = min(step, length) # Следующая точка прыжка
    # Производим скачок вперед по массиву
    while next_jump < length and arr[next_jump] <= target:
        prev = next_jump
        next_jump += step
3. Производится линейный поиск в найденном сегменте:
for idx in range(prev, min(next_jump, length)):
        if arr[idx] == target:
            return idx
4. Возврат результата (-1, если элемент не найден):
return -1  # Если элемент не обнаружен

3) Описание временной сложности:
Лучший случай: O(кореньN), где N — длина массива.

4) Краткое объяснение оценки временной сложности алгоритма:
Почему кореньN? Потому что оптимальное расстояние прыжков в отсортированном массиве равно корню из размера массива, что минимизирует количество проверок.





ЭКСПОНЕНЦИАЛЬНЫЙ ПОИСК
1) Определение:
Экспоненциальный поиск — это эффективный алгоритм поиска в отсортированных массивах, сочетающий преимущества экспоненциального подхода и классического бинарного поиска.
Вместо прямого перехода к бинарному поиску, алгоритм вначале осуществляет быстрый предварительный поиск с увеличением дистанции экспоненциально, сокращая потенциальный диапазон возможных позиций для дальнейшего точного поиска.

2) Кратко о работе алгоритма:
1. Начальный этап:
if not arr or arr[0] > target:
    return -1  # Если массив пуст или первый элемент больше искомого
2. Экспоненциальное расширение:
bound = 1
while bound < len(arr) and arr[bound] < target:
    bound *= 2  # Удваиваем индекс (экспоненциальный рост)
3. Бинарный поиск в найденном диапазоне:
left_bound = bound // 2
right_bound = min(bound, len(arr) - 1)
result = binary_search(arr, left_bound, right_bound, target)

3) Временная сложность:
Средняя и худшая временная сложность: O(log i), где i — индекс искомого элемента в массиве.

Описание временной сложности:
Первоначальный экспоненциальный поиск достигает требуемой позиции за O(logi) шагов, где i — позиция искомого элемента.
Затем обычный бинарный поиск выполняется на меньшем участке массива, также занимая O(logi) времени.

4) Краткое объяснение оценки временной сложности алгоритма:
Экспоненциальный поиск включает два этапа:
Экспоненциальное передвижение: занимает O(log i) шагов, где i — индекс искомого элемента.
Бинарный поиск: также выполняется за O(log i).












